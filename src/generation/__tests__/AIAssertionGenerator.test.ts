import { Page } from 'playwright';\nimport { AIAssertionGenerator, AssertionContext, StagehandInterface } from '../AIAssertionGenerator';\nimport { InteractionStep } from '../../types/recording';\nimport { InteractiveElement } from '../../types/elements';\n\n// Mock logger\njest.mock('../../utils/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    debug: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n}));\n\ndescribe('AIAssertionGenerator', () => {\n  let generator: AIAssertionGenerator;\n  let mockStagehand: jest.Mocked<StagehandInterface>;\n  let mockPage: jest.Mocked<Page>;\n\n  beforeEach(() => {\n    generator = new AIAssertionGenerator({\n      maxAssertionsPerAction: 3,\n      includeVisibilityAssertions: true,\n      includeContentAssertions: true,\n      includeStateAssertions: true,\n      confidence: 0.7,\n    });\n\n    mockStagehand = {\n      observe: jest.fn(),\n      extract: jest.fn(),\n    };\n\n    mockPage = {\n      url: jest.fn().mockReturnValue('https://example.com/test'),\n    } as any;\n\n    jest.clearAllMocks();\n  });\n\n  describe('initialization', () => {\n    it('should initialize with Stagehand', () => {\n      generator.initialize(mockStagehand);\n      expect(generator).toBeDefined();\n    });\n  });\n\n  describe('generateAssertions', () => {\n    beforeEach(() => {\n      generator.initialize(mockStagehand);\n    });\n\n    it('should generate rule-based assertions for navigation', async () => {\n      const context: AssertionContext = {\n        action: {\n          type: 'navigate',\n          url: 'https://example.com/dashboard',\n          timestamp: Date.now(),\n        },\n        pageState: {\n          url: 'https://example.com/home',\n          title: 'Home',\n          visibleElements: [],\n          hiddenElements: [],\n        },\n        previousAssertions: [],\n      };\n\n      // Mock empty AI responses to test rule-based fallback\n      mockStagehand.observe.mockResolvedValue([]);\n\n      const assertions = await generator.generateAssertions(mockPage, context);\n\n      expect(assertions.length).toBeGreaterThan(0);\n      const navigationAssertion = assertions.find(a => a.condition === 'url_equals');\n      expect(navigationAssertion).toBeDefined();\n      expect(navigationAssertion?.expected).toBe('https://example.com/dashboard');\n      expect(navigationAssertion?.code).toContain('toBe');\n    });\n\n    it('should generate rule-based assertions for text input', async () => {\n      const context: AssertionContext = {\n        action: {\n          type: 'type',\n          element: {\n            id: 'test-1',\n            type: 'text-input',\n            selector: '#email-input',\n            text: '',\n            attributes: { type: 'email' },\n            isVisible: true,\n            isEnabled: true,\n          },\n          data: 'test@example.com',\n          timestamp: Date.now(),\n        },\n        pageState: {\n          url: 'https://example.com/form',\n          title: 'Contact Form',\n          visibleElements: [],\n          hiddenElements: [],\n        },\n        previousAssertions: [],\n      };\n\n      mockStagehand.observe.mockResolvedValue([]);\n\n      const assertions = await generator.generateAssertions(mockPage, context);\n\n      expect(assertions.length).toBeGreaterThan(0);\n      const valueAssertion = assertions.find(a => a.condition === 'value');\n      expect(valueAssertion).toBeDefined();\n      expect(valueAssertion?.expected).toBe('test@example.com');\n      expect(valueAssertion?.code).toContain('toHaveValue');\n    });\n\n    it('should handle AI failures gracefully', async () => {\n      const context: AssertionContext = {\n        action: {\n          type: 'click',\n          element: {\n            id: 'test-1',\n            type: 'button',\n            selector: '#test-btn',\n            text: 'Test',\n            attributes: {},\n            isVisible: true,\n            isEnabled: true,\n          },\n          timestamp: Date.now(),\n        },\n        pageState: {\n          url: 'https://example.com/test',\n          title: 'Test Page',\n          visibleElements: [],\n          hiddenElements: [],\n        },\n        previousAssertions: [],\n      };\n\n      // Mock AI failure\n      mockStagehand.observe.mockRejectedValue(new Error('AI service unavailable'));\n\n      const assertions = await generator.generateAssertions(mockPage, context);\n\n      // Should fall back to rule-based assertions\n      expect(assertions).toBeDefined();\n      expect(assertions.length).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('rule-based fallback', () => {\n    it('should generate rule-based assertions without Stagehand', async () => {\n      // Don't initialize with Stagehand\n      const context: AssertionContext = {\n        action: {\n          type: 'navigate',\n          url: 'https://example.com/dashboard',\n          timestamp: Date.now(),\n        },\n        pageState: {\n          url: 'https://example.com/home',\n          title: 'Home',\n          visibleElements: [],\n          hiddenElements: [],\n        },\n        previousAssertions: [],\n      };\n\n      const assertions = await generator.generateAssertions(mockPage, context);\n\n      expect(assertions).toHaveLength(1);\n      expect(assertions[0].type).toBe('network');\n      expect(assertions[0].condition).toBe('url_equals');\n      expect(assertions[0].expected).toBe('https://example.com/dashboard');\n    });\n\n    it('should generate assertion for form submission', async () => {\n      const context: AssertionContext = {\n        action: {\n          type: 'click',\n          element: {\n            id: 'test-1',\n            type: 'button',\n            selector: '#submit-form',\n            text: 'Submit',\n            attributes: { type: 'submit' },\n            isVisible: true,\n            isEnabled: true,\n          },\n          timestamp: Date.now(),\n        },\n        pageState: {\n          url: 'https://example.com/form',\n          title: 'Form',\n          visibleElements: [],\n          hiddenElements: [],\n        },\n        previousAssertions: [],\n      };\n\n      const assertions = await generator.generateAssertions(mockPage, context);\n\n      expect(assertions.length).toBeGreaterThan(0);\n      const navigationAssertion = assertions.find(a => a.condition === 'url_change');\n      expect(navigationAssertion).toBeDefined();\n    });\n  });\n});